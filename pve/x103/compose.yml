services:
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    ports:
      - 9443:9443
    volumes:
      - ${PWD}/docker/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  caddy:
    build:
      context: .
      dockerfile: Caddy.Dockerfile
    container_name: caddy
    env_file:
      - .env
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - ACME_AGREE=true
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${PWD}/docker/caddy/config:/config
      - ${PWD}/docker/caddy/data:/data
      - ${PWD}/docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ${PWD}/docker/caddy/index.html:/usr/share/caddy/index.html
      - ${PWD}/xk6/dashboards:/usr/share/caddy/xk6/dashboards
    restart: unless-stopped

  mongo:
    container_name: mongo
    image: mongo:latest
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    ports:
      - 27017:27017
    volumes:
      - ${PWD}/docker/mongo/db:/data/db
      - ${PWD}/docker/mongo/config:/data/configdb
    restart: unless-stopped

  mongo-express:
    container_name: mongo-express
    image: mongo-express:latest
    restart: unless-stopped
    ports:
      - 8081:8081
    env_file: .env
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_URL=${ME_CONFIG_MONGODB_URL}
      - ME_CONFIG_BASICAUTH=${ME_CONFIG_BASICAUTH}

  redis-stack:
    container_name: redis-stack
    image: redis/redis-stack:latest
    restart: unless-stopped
    ports:
      - 6379:6379
      - 8001:8001
    volumes:
      - ${PWD}/docker/redis/data:/data

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    ports:
      - 8086:8086
    env_file: .env
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB}
      - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
    volumes:
      - ${PWD}/docker/influxdb/data:/var/lib/influxdb2
      - ${PWD}/docker/influxdb/config:/etc/influxdb2
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    env_file: .env
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ${PWD}/docker/grafana/provisioning:/etc/grafana/provisioning/
    restart: unless-stopped
